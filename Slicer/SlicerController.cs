using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Diagnostics;
using System.Threading;
using System.IO;
using System.Windows.Controls;
using Microsoft.Phone.Controls;
using RepRap_Phone_Host.Containers;
using RepRap_Phone_Host.ListItems;
using RepRap_Phone_Host.FileSystem;
using RepRap_Phone_Host.GlobalValues;

namespace RepRap_Phone_Host.Slicer
{
    /// <summary>
    /// This class is the controller class for the slicer module.
    /// </summary>
    class SlicerController
    {
        //This is the controller related to all slicing functions inculding those related to modifying the slicer settings
        LogBox outputBox;
        Thread sliceThread;
        //CuraSlicer curaSlicer;
        PolyChopperSlicer polyChopper;
        PhoneApplicationPage outputPage;

        /// <summary>
        /// This function initialises the controller for the slicer module
        /// </summary>
        /// <param name="_fileList">The listpicker that will contain the list of stl files that can ban sliced</param>
        /// <param name="outputStackPanel">The stackpanel that will contain the output log of the active slicer</param>
        /// <param name="GCodePanel">The stackpanel that will be used to view the generated GCode</param>
        /// <param name="GCodeScroller">The scrollviewer that will be used to view the generated GCode</param>
        /// <param name="_outputPage">The page that contains the output elements. NOTE: At the moment only the Dispatcher of the page is used so the page 
        /// does not necessarily have to contain the output elements but should be in focus at the right time</param>
        public SlicerController(StackPanel outputStackPanel, PhoneApplicationPage _outputPage)
        {
            //Store the variables and initialise the needed elements
            outputPage = _outputPage;
            outputBox = new LogBox(outputStackPanel, outputPage, 27);
            //curaSlicer = new CuraSlicer(this);
            polyChopper = new PolyChopperSlicer(this, ref sliceThread);
            //initiales the thread with an empty function sothat we can altleast check if it is alive without  a null reference exception
            sliceThread = new Thread(new ThreadStart(() => { }));
        }

        /// <summary>
        /// Start the process of slicing the currently selected stl file with the current slicer in a background thread
        /// </summary>
        public void startSlicer()
        {
            Values.stl_IsBusy = true;

            //Tell the slicing engine to start slcing the current file in the background thread dedicated to the slicing process slicing
            //curaSlicer.startSlicer(ApplicationSettings.currentStlFile, ref sliceThread);
            polyChopper.startSlicer(ref sliceThread, Values.currentStlFile, Values.currentStlFile.Replace(".stl", ".gcode"));
        }

        /// <summary>
        /// This function stops the current slicing engine
        /// if it is currently active
        /// </summary>s
        public void stopSlicer()
        {
            //Tell the current engine engine to stop the slicing process
            //curaSlicer.stopSlicer(ref sliceThread);
            polyChopper.stopSlicer(ref sliceThread);

            Values.stl_IsBusy = false;
        }

        public event SlicingFinsihedEventHandler SlicingFinishedEvent;
        public delegate void SlicingFinsihedEventHandler();
        /// <summary>
        /// The function handles the event where the slicing engine has finished.
        /// It loads the newly generated GCode file into the secified viewer.
        /// </summary>
        public void handleSlicerFinished()
        {
            Values.stl_IsBusy = false;

            if (SlicingFinishedEvent != null)
                SlicingFinishedEvent();
        }

        /// <summary>
        /// Handle the event where slicing output is generated by adding it to the current log
        /// </summary>
        /// <param name="otputLine"></param>
        public void handleSlicerOutput(string otputLine)
        {
            //TODO: add proper eol character handling, we should actually break up the string into seperate lines according to the eol terminators
            //Debug.WriteLine(otputLine);
            //At the moment we simply erease the eol added to the lines by the engine because they should actually not be there
            outputBox.writeLine(otputLine.Replace(@"\n", ""));
        }
    }
}
